---
# Source: cloud-manager-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-manager-agent
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
---
# Source: cloud-manager-agent/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cloud-manager-agent-extra
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  application-default.properties: |
---
# Source: cloud-manager-agent/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-manager-agent
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
data:
  application.properties: |
    logging.level.org.apache=INFO
    spring.main.banner-mode=off
    spring.application.name=cloud-manager
    spring.cloud.refresh.refreshable=none
    management.health.probes.enabled=true
    server.address=0.0.0.0
    server.port=7943
    security.require-ssl=true
    server.ssl.key-store-type=JKS
    server.ssl.key-store=/streamnative-cloud/cloud-manager/tls/keystore.jks
    server.ssl.key-store-password=changeit
    server.ssl.key-alias=certificate
    # OAuth2 Resource Server
    spring.security.oauth2.resourceserver.jwt.issuer-uri=
    spring.security.oauth2.resourceserver.jwt.audience=
    spring.security.oauth2.resourceserver.jwt.username-claim=https://streamnative.io/username
    # Metrics
    management.endpoints.web.exposure.include=*
    management.metrics.tags.application=${spring.application.name}
    management.metrics.distribution.percentiles-histogram.http.server.requests=true
    management.metrics.distribution.percentiles.all=0.5, 0.75, 0.95, 0.98, 0.99, 0.999, 1.0
    mybatis.type-aliases-package=io.streamnative.cloud.manager
    # postgresql configuration
    spring.datasource.driver-class-name=org.postgresql.Driver
    spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/cloud_manager
    spring.datasource.username=cloud_manager
    spring.datasource.password=cloud_manager
    pagehelper.helperDialect=postgresql
    backend.directRequestBroker=true
    # enable tls encryption
    # keytool -import -alias test-keystore -keystore ca-certs -file certs/ca.cert.pem
    http.client.tls.enabled=true
    http.client.tls.keystore=keystore-file-path
    http.client.tls.keystore.password=keystore-password
    http.client.tls.hostname.verifier=false
    http.client.tls.pulsar.admin.ca-certs=ca-client-path
    # Stats interval
    # millisecond
    insert.stats.interval=60000
    # millisecond
    clear.stats.interval=300000
    init.delay.interval=0
    # cluster data reload
    cluster.cache.reload.interval.ms=60000
    # support peek message, default false
    pulsar.peek.message=true
    # zuul config
    # https://cloud.spring.io/spring-cloud-static/Dalston.SR5/multi/multi__router_and_filter_zuul.html
    # By Default Zuul adds  Authorization to be dropped headers list. Below we are manually setting it
    zuul.sensitive-headers=Cookie,Set-Cookie
    zuul.routes.admin.path=/admin/**
    zuul.routes.admin.url=http://localhost:8080/admin/
    zuul.routes.lookup.path=/lookup/**
    zuul.routes.lookup.url=http://localhost:8080/lookup/
    cloud.api.certificate-authority-data=
    cloud.api.insecure-skip-tls-verify=false
    cloud.api.host=
    cloud.api.audience=
    cloud.api.username-claim=https://streamnative.io/username
    # Super token configuration, services account name cloud
    # After create service account, use command kubectl create clusterrolebinding grant permission.
    # For example: kubectl create clusterrolebinding cloud-cluster-admin-binding --clusterrole cluster-admin --user cloud@matrix.streamnative-dev-yyang.auth0.com
    cloud.api.super.namespace=streamnative
    cloud.api.super.name=cloud-ui
    cloud.api.super.email=
    cloud.api.super.client-id=client-id
    cloud.api.super.client-secret=client-secret
    pulsar.instance.host.port=443
    cloud.api.invite.callback.host=
    cluster.client.cache.interval.ms=120000
    cluster.client.sync.data-to-database.ms=300000
    stripe.default.secret.api.key=
    stripe.default.currency=
    stripe.default.amount=
    stripe.default.subscription-id.claim=annotations.cloud.streamnative.io/stripe-subscription-id
    cloud.pool.member.default.poll.interval=
    cloud.domain.suffix=
    cloud.create.resource.loop.default.time=
    cloud.default.shared-pool-namespace=
    cloud.default.shared-pool-name=
    cloud.organization.customer.claim=annotations.cloud.streamnative.io/stripe-customer-id
    pulsar.cluster.enable.metrics.collect=true
    cloud.enable.multi.broker.collect=true
    stripe.collect.pulsar.namespace.claim=
    stripe.collect.pulsar.instance.claim=
    stripe.product.data.in.type=dataIn
    stripe.product.data.out.type=dataOut
    stripe.product.data.storage.type=storage
    stripe.product.data.compute.type=compute
    pulsar.cluster.domain.name.claim=dnsName
    pulsar.cluster.max.bookie.pods-number=10
    pulsar.cluster.max.broker.pods-number=10
    pulsar.cluster.bookie.node-spec-config.path=
    pulsar.cluster.broker.node-spec-config.path=
    cloud.controller.certificate-authority-data=
    cloud.controller.insecure-skip-tls-verify=false
    cloud.controller.host=
    cloud.controller.token=
    cloud.controller.cluster.claim=cloud.streamnative.io/pulsar-cluster
    cloud.controller.instance.claim=cloud.streamnative.io/pulsar-instance
    cloud.api.server.organization.default.type=
    cloud.api.server.organization.default.project=
    cloud.api.server.resend.invite.link.claim=annotations.cloud.streamnative.io/invitation-sent
    cloud.api.server.invite.link.default.expiration=259200
    cloud.agent.get-stats.enable=true
    cloud.agent.default.audience.claim=aud
    cloud.agent.default.username.suffix=
    cloud.agent.enable=true
    # unit ms
    api.request.cost.default.time=1000
---
# Source: cloud-manager-agent/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cloud-manager-agent
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - ""
  resources:
    - pods
    - services
    - services/finalizers
    - endpoints
    - configmaps
    - secrets
  verbs:
    - 'get'
    - 'list'
    - 'watch'
- apiGroups:
    - apps
  resources:
    - deployments
    - daemonsets
    - replicasets
    - statefulsets
  verbs:
    - 'get'
    - 'list'
    - 'watch'
---
# Source: cloud-manager-agent/templates/rolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloud-manager-agent
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cloud-manager-agent
subjects:
  - kind: ServiceAccount
    name: cloud-manager-agent
    namespace: "sn-system"
---
# Source: cloud-manager-agent/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cloud-manager-agent
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - ""
  resources:
    - pods
    - services
    - services/finalizers
    - endpoints
    - configmaps
    - secrets
  verbs:
    - 'get'
    - 'list'
    - 'watch'
- apiGroups:
    - apps
  resources:
    - deployments
    - daemonsets
    - replicasets
    - statefulsets
  verbs:
    - 'get'
    - 'list'
    - 'watch'
---
# Source: cloud-manager-agent/templates/rolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cloud-manager-agent
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cloud-manager-agent
subjects:
  - kind: ServiceAccount
    name: cloud-manager-agent
    namespace: "sn-system"
---
# Source: cloud-manager-agent/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cloud-manager-agent-headless-service
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 7943
      targetPort: 7943
      protocol: TCP
      name: backend
  selector:
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
---
# Source: cloud-manager-agent/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cloud-manager-agent
  namespace: "sn-system"
  labels:
    helm.sh/chart: cloud-manager-agent-1.0.0
    app.kubernetes.io/name: cloud-manager-agent
    app.kubernetes.io/instance: cloud-manager-agent
    app.kubernetes.io/version: "v2.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  serviceName: cloud-manager-agent-headless-service
  selector:
    matchLabels:
      app.kubernetes.io/name: cloud-manager-agent
      app.kubernetes.io/instance: cloud-manager-agent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cloud-manager-agent
        app.kubernetes.io/instance: cloud-manager-agent
    spec:      # end if/elseif/elseif
      serviceAccountName: cloud-manager-agent
      terminationGracePeriodSeconds: 10
      containers:
      - name: agent
        image: gcr.io/affable-ray-226821/streamnative/cloud-manager-agent:v2.0.5
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: agent
            scheme: HTTPS
        ports:
          - containerPort: 7943
            name: agent
            protocol: TCP
        volumeMounts:
          - name: cloud-manager-agent-configmap
            mountPath: /streamnative-cloud/cloud-manager/config/application.properties
            subPath: application.properties
          - name: cloud-manager-agent-configmap-profile
            mountPath: /streamnative-cloud/cloud-manager/config/application-agent.properties
            subPath: application-agent.properties
          # - name: cloud-manager-agent-tls
          #   mountPath: /streamnative-cloud/cloud-manager/tls
          - name: data
            mountPath: /data
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 1Gi
      restartPolicy: Always
      volumes:
        - name: cloud-manager-agent-configmap
          configMap:
            name: cloud-manager-agent
            items:
              - key: application.properties
                path: application.properties
        - name: cloud-manager-agent-configmap-profile
          secret:
            secretName: cloud-manager-agent-extra
            items:
              - key: application-default.properties
                path: application-agent.properties
        # - name: cloud-manager-agent-tls
        #   secret:
        #     secretName: ctl-tls
        - name: data
          emptyDir: {}
  updateStrategy:
    type: RollingUpdate
